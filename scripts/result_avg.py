#!/bin/env python3
#Script developed by Piotr Beling for averaging results generated by MPHF-Experiment.
from collections import defaultdict, namedtuple
from pathlib import Path
from decimal import Decimal
import sys

to_sum = ('queryTimeMilliseconds', 'numQueries', 'numQueriesTotal')
to_avg = ('bitsPerElement',)
to_avg_round = ('constructionTimeMilliseconds',)

weight = 1
query_weight = 1
extend = True

class Value:
    def __init__(self):
        self.sum = defaultdict(Decimal)
        self.count = 0

results = defaultdict(Value)
  
def add_results_from(file):
    for l in file:
        if not l.startswith('RESULT'): continue
        key = ''
        values = {}
        for kv in l.strip().split()[1:]:
            k, v = kv.split('=')
            if k in to_sum or k in to_avg or k in to_avg_round:
                values[k] = Decimal(v)
            else:
                if k: key += ' '
                key += kv
        if not extend and key not in results: continue
        res_val = results[key]
        res_val.count += weight
        for k, v in values.items():
            res_val.sum[k] += v * (query_weight if k in to_sum else weight)

if len(sys.argv) == 1 or (len(sys.argv) == 2 and sys.argv[1] in ("-h", "--help")):
    print("Usage: {} <file or directory or option>...".format(sys.argv[0]))
    print("The directories are recursively searched for all .txt files.")
    print("The following options are available and apply to further files:")
    print("   -w<construction and size weight to set>,")
    print("   -q<query weight to set>,")
    print("   -u ignores previously unseen configurations,")
    print("   -a considers previously unseen configurations.")
    print("Piotr Beling 2025")
    sys.exit(0)
        
for dir in sys.argv[1:] if len(sys.argv) > 1 else ('.',):
    if dir.startswith('-'):
        option = dir[1:]
        if option.startswith('qw') or option.startswith('wq'):
            weight = int(option[2:])
            query_weight = weight
        elif option.startswith('w'): weight = int(option[1:])
        elif option.startswith('q'): query_weight = int(option[1:])
        elif option.startswith('a'): extend = True
        elif option.startswith('u'): extend = False
        else:
            print('ignoring unknown option "-{option}", expected: -w<weight to set>, -q<query weight to set>, -a, -u', file=sys.stderr)
        continue
    p = Path(dir)
    if p.is_file():
        with open(p) as f: add_results_from(f)
    elif p.is_dir():
        for filename in p.rglob('*.txt'):
            with open(filename) as f: add_results_from(f)
    else:
        print(f"Cannot find file or directory '{dir}'.", file=sys.stderr)

for key, value in results.items():
    print('RESULT', key, end='')
    for k, v in value.sum.items():
        print(f' {k}=', end='')
        if k in to_sum: print(v, end='')
        elif k in to_avg: print(v / value.count, end='')
        else: print(round(v / value.count), end='')
    print()